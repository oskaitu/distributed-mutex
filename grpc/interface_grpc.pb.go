// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: grpc/interface.proto

package beer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributedMutexClient is the client API for DistributedMutex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributedMutexClient interface {
	Drink(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type distributedMutexClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedMutexClient(cc grpc.ClientConnInterface) DistributedMutexClient {
	return &distributedMutexClient{cc}
}

func (c *distributedMutexClient) Drink(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/beer.DistributedMutex/Drink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedMutexServer is the server API for DistributedMutex service.
// All implementations must embed UnimplementedDistributedMutexServer
// for forward compatibility
type DistributedMutexServer interface {
	Drink(context.Context, *Request) (*Reply, error)
	mustEmbedUnimplementedDistributedMutexServer()
}

// UnimplementedDistributedMutexServer must be embedded to have forward compatible implementations.
type UnimplementedDistributedMutexServer struct {
}

func (UnimplementedDistributedMutexServer) Drink(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Drink not implemented")
}
func (UnimplementedDistributedMutexServer) mustEmbedUnimplementedDistributedMutexServer() {}

// UnsafeDistributedMutexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedMutexServer will
// result in compilation errors.
type UnsafeDistributedMutexServer interface {
	mustEmbedUnimplementedDistributedMutexServer()
}

func RegisterDistributedMutexServer(s grpc.ServiceRegistrar, srv DistributedMutexServer) {
	s.RegisterService(&DistributedMutex_ServiceDesc, srv)
}

func _DistributedMutex_Drink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedMutexServer).Drink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.DistributedMutex/Drink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedMutexServer).Drink(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributedMutex_ServiceDesc is the grpc.ServiceDesc for DistributedMutex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedMutex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beer.DistributedMutex",
	HandlerType: (*DistributedMutexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Drink",
			Handler:    _DistributedMutex_Drink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/interface.proto",
}
